rules_version = '2';
service cloud.firestore {
  function isAuthenticated() {
    return request.auth.uid != null
  }

  function isUserAuthenticated(uid) {
    return request.auth.uid == uid
  }

  function isAcceptUpdateUser() {
    return request.resource.data.userID == resource.data.userID
      && request.resource.data.enabled == resource.data.enabled 
      && request.resource.data.isAccepted == resource.data.isAccepted
  }

  function isAcceptCreateMessage() {
    // return request.resource.data.writerUID == request.auth.uid || request.resource.data.writerUID == 'admin'
    return request.resource.data.text is string
      && request.resource.data.text.size() >= 1
  }

  match /databases/{database}/documents {
    // MEMO: get(...)あまり使いたくない。
    function getUser() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid))
    }

    match /users/{uid} {
      allow update: if (isUserAuthenticated(uid) && isAcceptUpdateUser()) || 'admin' in getUser().data.roles;
      allow read: if isAuthenticated();

      match /options/secure {
        allow read, write: if isUserAuthenticated(uid);
      }

      match /blockUsers {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{blockUserID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }

      match /applyFriendUsers {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{applyFriendUserID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }

      match /appliedFriendUsers {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{appliedFriendUserID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }

      match /friends {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{friendID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }

      match /appliedCards {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{appliedCardID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }

      match /likeGroupAssets {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{likeGroupAssetID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }

      match /likedGroupAssets {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{likedGroupAssetID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }

      match /matchedGroupAssets {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{matchedGroupAssetID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }
      match /myGroupAssets {
        allow read, write, delete: if isUserAuthenticated(uid);
        match /{myGroupAssetID} {
          allow read, write, delete: if isUserAuthenticated(uid); 
        }
      }
    }

    match /parties/{partyID} {
      allow read: if isAuthenticated();

      match /groups/{groupID} {
        allow read, write: if isAuthenticated();
        
        // TODO: 構成決まったら{document=**}を使わない書き方に変える。
        match /{document=**} {
          allow read: if isAuthenticated();
        }

        match /members/{memberID} {
          allow write: if isAuthenticated();
        }
      }
    }

    match /rooms/{roomID} {
      allow read, write: if isAuthenticated();

      match /messages/{messageID} {
        allow read: if isAuthenticated();
        allow write: if isAuthenticated() && isAcceptCreateMessage();
      }

      match /events/{eventsID} {
        allow read, write: if isAuthenticated();
      }
    }
    match /reports/{report} {
      allow read, write: if isAuthenticated();
    }
  }
}
